openapi: 3.0.1
info:
  title: Club Events API
  description: |
    Unified API for authentication, user profiles, bookings, events, tickets, payments,
    recommendations, analytics, notifications and administration.
  version: "1.0.0"
servers:
  - url: https://api.example.com/api/v1
paths:
  # 1. Auth
  /auth/login:
    post:
      summary: Authenticate user and obtain JWT tokens
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthLoginRequest'
      responses:
        '200':
          description: Access and refresh tokens
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokens'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /auth/register:
    post:
      summary: Register new user and obtain JWT tokens
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRegisterRequest'
      responses:
        '200':
          description: Access and refresh tokens
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokens'
        '400':
          description: Registration failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /auth/refresh:
    post:
      summary: Refresh access token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: New access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokens'
        '401':
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # 2. User Profile
  /users/{login}/profile:
    get:
      summary: Get user profile
      parameters:
        - $ref: '#/components/parameters/PathLogin'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update user profile
      parameters:
        - $ref: '#/components/parameters/PathLogin'
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfileUpdate'
      responses:
        '200':
          description: Updated profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # 3. Employees (Admin)
  /admin/employees:
    get:
      summary: List all employees
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Array of employees
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Employee'
  /admin/employees/{id}:
    get:
      summary: Get employee by ID
      parameters:
        - $ref: '#/components/parameters/PathId'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Employee object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # 4. Events
  /events/preview:
    get:
      summary: Public list of event previews
      responses:
        '200':
          description: Array of event previews
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventPreview'
  /events/{id}:
    get:
      summary: Public event details
      parameters:
        - $ref: '#/components/parameters/PathId'
      responses:
        '200':
          description: Detailed event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventDetail'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /admin/events:
    get:
      summary: Admin list of detailed events
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Array of event details
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventDetail'
    post:
      summary: Create new event
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventCreateRequest'
      responses:
        '200':
          description: Created event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventDetail'
  /admin/events/{id}:
    put:
      summary: Update event
      parameters:
        - $ref: '#/components/parameters/PathId'
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventUpdateRequest'
      responses:
        '200':
          description: Updated event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventDetail'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /admin/events/{id}/cancel:
    post:
      summary: Cancel event
      parameters:
        - $ref: '#/components/parameters/PathId'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Canceled event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventDetail'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # 5. Halls
  /events/{eventId}/hall:
    get:
      summary: Get hall schema for event
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Hall layout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hall'

  # 6. Bookings
  /bookings:
    get:
      summary: List bookings for current user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Array of bookings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Booking'
    post:
      summary: Create a new booking
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookingRequest'
      responses:
        '200':
          description: Created booking
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
  /bookings/{id}/confirm:
    put:
      summary: Confirm a booking
      parameters:
        - $ref: '#/components/parameters/PathId'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Confirmed booking
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # 7. Tickets
  /tickets:
    get:
      summary: List tickets/orders for current user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Array of tickets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ticket'
    post:
      summary: Purchase a ticket
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketPurchaseRequest'
      responses:
        '200':
          description: Created ticket order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'

  # 8. Payments
  /payments:
    post:
      summary: Process a payment (stub)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentRequest'
      responses:
        '200':
          description: Payment receipt
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentReceipt'

  # 9. Incomes
  /admin/incomes:
    get:
      summary: List all incomes
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Array of incomes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Income'
  /admin/incomes/{id}:
    get:
      summary: Get income by ID
      parameters:
        - $ref: '#/components/parameters/PathId'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Income object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Income'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # 10. Reports
  /admin/reports/events:
    get:
      summary: Get event reports
      parameters:
        - $ref: '#/components/parameters/QueryStartDate'
        - $ref: '#/components/parameters/QueryEndDate'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Array of event reports
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReportEvent'
  /admin/reports/users:
    get:
      summary: Get user reports
      parameters:
        - $ref: '#/components/parameters/QueryStartDate'
        - $ref: '#/components/parameters/QueryEndDate'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Array of user reports
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReportUser'

  # 11. Recommendations
  /recommendations/{userId}:
    get:
      summary: Get recommended events for user
      parameters:
        - $ref: '#/components/parameters/PathUserId'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Array of event previews
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventPreview'

  # 12. Notifications
  /notifications/user/{userId}:
    get:
      summary: List notifications for user
      parameters:
        - $ref: '#/components/parameters/PathUserId'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Array of notifications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
  /notifications:
    post:
      summary: Create a notification
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationRequest'
      responses:
        '200':
          description: Created notification
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
  /notifications/{id}/read:
    put:
      summary: Mark notification as read
      parameters:
        - $ref: '#/components/parameters/PathId'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Updated notification
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /notifications/{id}:
    delete:
      summary: Delete a notification
      parameters:
        - $ref: '#/components/parameters/PathId'
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Deleted successfully

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    PathId:
      name: id
      in: path
      required: true
      schema:
        type: integer
        format: int64
    PathLogin:
      name: login
      in: path
      required: true
      schema:
        type: string
    PathUserId:
      name: userId
      in: path
      required: true
      schema:
        type: string
    QueryStartDate:
      name: startDate
      in: query
      required: true
      schema:
        type: string
        format: date
    QueryEndDate:
      name: endDate
      in: query
      required: true
      schema:
        type: string
        format: date

  schemas:
    Error:
      type: object
      properties:
        error:
          type: string

    AuthLoginRequest:
      type: object
      required: [login, password]
      properties:
        login:
          type: string
        password:
          type: string

    AuthRegisterRequest:
      type: object
      required: [login, password, email]
      properties:
        login:
          type: string
        password:
          type: string
        email:
          type: string

    RefreshTokenRequest:
      type: object
      required: [refreshToken]
      properties:
        refreshToken:
          type: string

    AuthTokens:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string

    UserProfile:
      type: object
      properties:
        login:
          type: string
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        middleName:
          type: string
        phone:
          type: string
        city:
          type: string
        birthDate:
          type: string
          format: date

    UserProfileUpdate:
      allOf:
        - $ref: '#/components/schemas/UserProfile'
      required: [email]

    Employee:
      type: object
      properties:
        id:
          type: integer
        firstName:
          type: string
        lastName:
          type: string
        middleName:
          type: string
        position:
          type: string
        salary:
          type: number
          format: double
        city:
          type: string
        phone:
          type: string
        email:
          type: string
        birthDate:
          type: string
          format: date
        photoPath:
          type: string
          nullable: true

    EventPreview:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        date:
          type: string
          format: date
        genre:
          type: string
        ageRating:
          type: string
        minPrice:
          type: number
          format: double
        imgPreview:
          type: string
        status:
          type: string
          enum: [ACTIVE, ARCHIVED, EDITING, INACTIVE]

    EventDetail:
      allOf:
        - $ref: '#/components/schemas/EventPreview'
      properties:
        description:
          type: string
        artists:
          type: array
          items:
            type: string
        duration:
          type: integer
          format: int32

    EventCreateRequest:
      type: object
      required: [title, date, genre, minPrice]
      properties:
        title:
          type: string
        date:
          type: string
          format: date
        genre:
          type: string
        ageRating:
          type: string
        description:
          type: string
        artists:
          type: array
          items:
            type: string
        duration:
          type: integer
        imgPreview:
          type: string
        minPrice:
          type: number
        status:
          type: string
          enum: [ACTIVE, ARCHIVED, EDITING, INACTIVE]

    EventUpdateRequest:
      allOf:
        - $ref: '#/components/schemas/EventCreateRequest'

    Hall:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        capacity:
          type: integer
        seatingPlan:
          type: array
          items:
            $ref: '#/components/schemas/SeatPlan'

    SeatPlan:
      type: object
      properties:
        row:
          type: integer
        col:
          type: integer
        seatType:
          type: string
        available:
          type: boolean

    Booking:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: string
        eventId:
          type: string
        seats:
          type: array
          items:
            type: string
        bookingDate:
          type: string
          format: date-time
        status:
          type: string
          enum: [pending, confirmed, canceled]

    BookingRequest:
      type: object
      required: [eventId, seats]
      properties:
        eventId:
          type: string
        seats:
          type: array
          items:
            type: string
        paymentMethod:
          type: string

    Ticket:
      type: object
      properties:
        orderId:
          type: integer
        ticketCode:
          type: string
        event:
          $ref: '#/components/schemas/EventPreview'
        seats:
          type: array
          items:
            type: string
        issueDate:
          type: string
          format: date-time
        status:
          type: string
          enum: [PENDING, CONFIRMED, CANCELED]

    TicketPurchaseRequest:
      type: object
      required: [eventId, seats]
      properties:
        eventId:
          type: string
        seats:
          type: array
          items:
            type: string
        paymentMethod:
          type: string

    PaymentRequest:
      type: object
      required: [bookingId, amount]
      properties:
        bookingId:
          type: string
        amount:
          type: number
          format: double

    PaymentReceipt:
      type: object
      properties:
        receiptId:
          type: string
        bookingId:
          type: string
        amount:
          type: number
          format: double
        status:
          type: string
        paymentDate:
          type: string
          format: date-time

    Income:
      type: object
      properties:
        id:
          type: integer
        amount:
          type: number
          format: double
        source:
          type: string
        date:
          type: string
          format: date
        category:
          type: string

    ReportEvent:
      type: object
      properties:
        eventId:
          type: string
        report:
          $ref: '#/components/schemas/ReportData'

    ReportUser:
      type: object
      properties:
        userId:
          type: string
        report:
          $ref: '#/components/schemas/UserReportData'

    ReportData:
      type: object
      properties:
        profit:
          type: number
          format: double
        ticketSold:
          type: integer
        expenses:
          type: number
          format: double
        netProfit:
          type: number
          format: double

    UserReportData:
      type: object
      properties:
        ticketSold:
          type: integer
        expenses:
          type: number
          format: double
        netProfit:
          type: number
          format: double

    Notification:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: string
        message:
          type: string
        createdAt:
          type: string
          format: date-time
        read:
          type: boolean

    NotificationRequest:
      type: object
      required: [userId, message]
      properties:
        userId:
          type: string
        message:
          type: string
