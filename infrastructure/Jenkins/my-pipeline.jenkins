pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = "myregistry.example.com"
        DOCKER_USER = credentials('docker-username')
        DOCKER_PASSWORD = credentials('docker-password')
        APP_VERSION = "${env.BUILD_NUMBER}"
        KUBE_NAMESPACE = "my-namespace"
        HELM_CHART_PATH = "infrastructure/helm/"
    }

    stages {
        stage('Checkout') {
            steps {
                echo "Checkout кода из репозитория"
                checkout scm
            }
        }

        stage('Build & Test') {
            steps {
                echo "Сборка Maven-проектов и запуск тестов"
                // Сборка всех модулей; предполагается, что проекты находятся в отдельных каталогах
                sh 'mvn clean package -DskipTests'
                sh 'mvn test'
            }
        }

        stage('Build Docker Images') {
            parallel {
                stage('Build gateway-service') {
                    steps {
                        dir('gateway-service') {
                            echo "Сборка образа для gateway-service"
                            sh "docker build -t ${DOCKER_REGISTRY}/gateway-service:${APP_VERSION} ."
                        }
                    }
                }
                stage('Build auth-service') {
                    steps {
                        dir('auth-service') {
                            echo "Сборка образа для auth-service"
                            sh "docker build -t ${DOCKER_REGISTRY}/auth-service:${APP_VERSION} ."
                        }
                    }
                }
                stage('Build user-service') {
                    steps {
                        dir('user-service') {
                            echo "Сборка образа для user-service"
                            sh "docker build -t ${DOCKER_REGISTRY}/user-service:${APP_VERSION} ."
                        }
                    }
                }
                stage('Build public-event-service') {
                    steps {
                        dir('public-event-service') {
                            echo "Сборка образа для public-event-service"
                            sh "docker build -t ${DOCKER_REGISTRY}/public-event-service:${APP_VERSION} ."
                        }
                    }
                }
                stage('Build admin-event-service') {
                    steps {
                        dir('admin-event-service') {
                            echo "Сборка образа для admin-event-service"
                            sh "docker build -t ${DOCKER_REGISTRY}/admin-event-service:${APP_VERSION} ."
                        }
                    }
                }
                stage('Build booking-service') {
                    steps {
                        dir('booking-service') {
                            echo "Сборка образа для booking-service"
                            sh "docker build -t ${DOCKER_REGISTRY}/booking-service:${APP_VERSION} ."
                        }
                    }
                }
                stage('Build ticketing-service') {
                    steps {
                        dir('ticketing-service') {
                            echo "Сборка образа для ticketing-service"
                            sh "docker build -t ${DOCKER_REGISTRY}/ticketing-service:${APP_VERSION} ."
                        }
                    }
                }
                stage('Build payment-service') {
                    steps {
                        dir('payment-service') {
                            echo "Сборка образа для payment-service"
                            sh "docker build -t ${DOCKER_REGISTRY}/payment-service:${APP_VERSION} ."
                        }
                    }
                }
                stage('Build notification-service') {
                    steps {
                        dir('notification-service') {
                            echo "Сборка образа для notification-service"
                            sh "docker build -t ${DOCKER_REGISTRY}/notification-service:${APP_VERSION} ."
                        }
                    }
                }
                stage('Build analytics-service') {
                    steps {
                        dir('analytics-service') {
                            echo "Сборка образа для analytics-service"
                            sh "docker build -t ${DOCKER_REGISTRY}/analytics-service:${APP_VERSION} ."
                        }
                    }
                }
            }
        }

        stage('Push Docker Images') {
            steps {
                echo "Логинимся в Docker-реестр и пушим образы"
                script {
                    sh "docker login ${DOCKER_REGISTRY} -u ${DOCKER_USER} -p ${DOCKER_PASSWORD}"
                }
                parallel {
                    stage('Push gateway-service') {
                        steps {
                            dir('gateway-service') {
                                sh "docker push ${DOCKER_REGISTRY}/gateway-service:${APP_VERSION}"
                            }
                        }
                    }
                    stage('Push auth-service') {
                        steps {
                            dir('auth-service') {
                                sh "docker push ${DOCKER_REGISTRY}/auth-service:${APP_VERSION}"
                            }
                        }
                    }
                    stage('Push user-service') {
                        steps {
                            dir('user-service') {
                                sh "docker push ${DOCKER_REGISTRY}/user-service:${APP_VERSION}"
                            }
                        }
                    }
                    stage('Push public-event-service') {
                        steps {
                            dir('public-event-service') {
                                sh "docker push ${DOCKER_REGISTRY}/public-event-service:${APP_VERSION}"
                            }
                        }
                    }
                    stage('Push admin-event-service') {
                        steps {
                            dir('admin-event-service') {
                                sh "docker push ${DOCKER_REGISTRY}/admin-event-service:${APP_VERSION}"
                            }
                        }
                    }
                    stage('Push booking-service') {
                        steps {
                            dir('booking-service') {
                                sh "docker push ${DOCKER_REGISTRY}/booking-service:${APP_VERSION}"
                            }
                        }
                    }
                    stage('Push ticketing-service') {
                        steps {
                            dir('ticketing-service') {
                                sh "docker push ${DOCKER_REGISTRY}/ticketing-service:${APP_VERSION}"
                            }
                        }
                    }
                    stage('Push payment-service') {
                        steps {
                            dir('payment-service') {
                                sh "docker push ${DOCKER_REGISTRY}/payment-service:${APP_VERSION}"
                            }
                        }
                    }
                    stage('Push notification-service') {
                        steps {
                            dir('notification-service') {
                                sh "docker push ${DOCKER_REGISTRY}/notification-service:${APP_VERSION}"
                            }
                        }
                    }
                    stage('Push analytics-service') {
                        steps {
                            dir('analytics-service') {
                                sh "docker push ${DOCKER_REGISTRY}/analytics-service:${APP_VERSION}"
                            }
                        }
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                echo "Обновление Helm-релиза umbrella chart"
                sh """
                   helm upgrade --install my-microservices ${HELM_CHART_PATH} \
                     --namespace ${KUBE_NAMESPACE} \
                     --set global.eureka.defaultZone=http://eureka-server:8761/eureka/ \
                     --set gateway-service.image.tag=${APP_VERSION} \
                     --set auth-service.image.tag=${APP_VERSION} \
                     --set user-service.image.tag=${APP_VERSION} \
                     --set public-event-service.image.tag=${APP_VERSION} \
                     --set admin-event-service.image.tag=${APP_VERSION} \
                     --set booking-service.image.tag=${APP_VERSION} \
                     --set ticketing-service.image.tag=${APP_VERSION} \
                     --set payment-service.image.tag=${APP_VERSION} \
                     --set notification-service.image.tag=${APP_VERSION} \
                     --set analytics-service.image.tag=${APP_VERSION}
                """
            }
        }
    }

    post {
        success {
            echo "Pipeline выполнен успешно!"
        }
        failure {
            echo "Pipeline завершился с ошибками!"
        }
        always {
            echo "Очистка рабочей области..."
            cleanWs()
        }
    }
}
