pipeline {
  agent any

  environment {
    DOCKER_REGISTRY = "myregistry.example.com"
    APP_VERSION     = "${env.BUILD_NUMBER}"
    KUBE_NAMESPACE  = "my-namespace"
    BASE_DIR        = "${env.WORKSPACE}"
    HELM_CHART_PATH = "${BASE_DIR}/infrastructure/helm"
    KUBECONFIG      = "${BASE_DIR}/.kube/config"
  }

  stages {
    stage('Checkout') {
      steps { checkout scm }
    }

    stage('Build & Test') {
      steps {
        script {
          def mods = ["gateway","auth","user","public-event","admin-event","booking","ticketing","payment","notification","analytics"].collect { it + "-service" }
          def tasks = [:]
          for (m in mods) {
            tasks[m] = {
              dir("${BASE_DIR}/${m}") {
                echo "→ Building ${m}"
                bat 'mvn clean package -DskipTests'
                bat 'mvn test'
              }
            }
          }
          parallel tasks
        }
      }
    }

    stage('Build & Push Docker Images') {
      steps {
        script {
          def mods = ["gateway","auth","user","public-event","admin-event","booking","ticketing","payment","notification","analytics"].collect { it + "-service" }
          def tasks = [:]
          for (m in mods) {
            tasks[m] = {
              dir("${BASE_DIR}/${m}") {
                echo "→ Docker build & push ${m}"
                bat "docker build -t ${DOCKER_REGISTRY}/${m}:${APP_VERSION} ."
                bat "docker push ${DOCKER_REGISTRY}/${m}:${APP_VERSION}"
              }
            }
          }
          parallel tasks
        }
      }
    }

    stage('Deploy to Kubernetes') {
        steps {
            script {
            // исходный список модулей
             def modules = [
            "gateway-service","auth-service","user-service",
            "public-event-service","admin-event-service","booking-service",
            "ticketing-service","payment-service","notification-service","analytics-service"
            ]
            // соберём все --set … флаги одним параметром
             def setArgs = modules
                       .collect { "--set ${it}.image.tag=${APP_VERSION}" }
                       .join(' ')
            // соберём команду целиком в одну Groovy-строку
            def helmCmd = "helm upgrade --install my-microservices " +
                        "${HELM_CHART_PATH} " +
                        "--namespace ${KUBE_NAMESPACE} " +
                        "--set global.eureka.defaultZone=\\\"http://eureka-server:8761/eureka/\\\" " +
                        "${setArgs}"
      // и запустим
            bat helmCmd
            }
        }   
    }
}
  post {
    success { echo "Pipeline выполнен успешно!" }
    failure { echo "Есть ошибки в сборке." }
    always  { cleanWs() }
  }
}
