pipeline {
  agent any

  environment {
    DOCKER_REGISTRY = "localhost:5000"
    APP_VERSION     = "${env.BUILD_NUMBER}"
    KUBE_NAMESPACE  = "my-namespace"
    BASE_DIR        = "${env.WORKSPACE}"
    HELM_CHART_PATH = "${BASE_DIR}/infrastructure/helm"
    KUBECONFIG      = "${BASE_DIR}/.kube/config"
  }

  stages {
    stage('Checkout') {
      steps { checkout scm }
    }

    stage('Build & Test') {
      steps {
        script {
          def mods = ["gateway","auth","user","public-event","admin-event","booking","ticketing","payment","notification","analytics"].collect { it + "-service" }
          def tasks = [:]
          for (m in mods) {
            def moduleName = m
            tasks[moduleName] = {
              dir("${BASE_DIR}/${moduleName}") {
                echo "→ Building ${moduleName}"
                bat 'mvn clean package -DskipTests'
                bat 'mvn test'
              }
            }
          }
          parallel tasks
        }
      }
    }

    stage('Build & Push Docker Images') {
      steps {
        script {
          def mods = ["gateway","auth","user","public-event","admin-event","booking","ticketing","payment","notification","analytics"].collect { it + "-service" }
          def tasks = [:]
          for (m in mods) {
            def moduleName = m
            tasks[moduleName] = {
              dir("${BASE_DIR}/${moduleName}") {
                echo "→ Docker build & push ${moduleName}"
                bat "docker build -t ${DOCKER_REGISTRY}/${moduleName}:${APP_VERSION} ."
                bat "docker push ${DOCKER_REGISTRY}/${moduleName}:${APP_VERSION}"
              }
            }
          }
          parallel tasks
        }
      }
    }
    stage('Deploy Database to Kubernetes') {
      steps {
        withCredentials([file(credentialsId: 'kubeconfig-file', variable: 'KUBECONFIG')]) {
          // проверим соединение
          bat 'kubectl cluster-info'

          // выполняем Helm-апгрейд
          script {
            // Поднимаем StatefulSet'ы для БД отдельно
            def postgresql = "helm upgrade --install postgresql ${HELM_CHART_PATH}/charts/postgresql " +
              "--namespace ${KUBE_NAMESPACE} " +
              "--set image.tag=${APP_VERSION} " +
              "--wait --timeout 5m --atomic"

            def mongodb = "helm upgrade --install mongodb ${HELM_CHART_PATH}/charts/mongodb " +
              "--namespace ${KUBE_NAMESPACE} " +
              "--set image.tag=${APP_VERSION} " +
              "--wait --timeout 5m --atomic"

            def redis = "helm upgrade --install redis ${HELM_CHART_PATH}/charts/redis " +
              "--namespace ${KUBE_NAMESPACE} " +
              "--set image.tag=${APP_VERSION} " +
              "--wait --timeout 5m --atomic"

            bat postgresql
            bat mongodb
            bat redis
          }
        }     
      }
    }
    stage('Deploy Services to Kubernetes') {
      steps {
        // раскрываем секретный файл в переменную KUBECONFIG
        withCredentials([file(credentialsId: 'kubeconfig-file', variable: 'KUBECONFIG')]) {
          // проверим соединение
          bat 'kubectl cluster-info'

          // выполняем Helm-апгрейд
          script {
            def database = ["postgresql", "mongodb", "redis"]
            def modules = [
              "gateway-service","auth-service","user-service",
              "public-event-service","admin-event-service","booking-service",
              "ticketing-service","payment-service","notification-service","analytics-service"
            ]
            def setArgs = modules.collect { "--set ${it}.image.tag=${APP_VERSION}" }.join(' ')
            def setDB = database.collect { "--set ${it}.enabled=false" }.join(' ')
            def helmCmd = "helm upgrade --install my-microservices " +
                          "${HELM_CHART_PATH} " +
                          "--namespace ${KUBE_NAMESPACE} " +
                          "--set global.eureka.defaultZone=\"http://eureka-server:8761/eureka/\" " +
                          "${setArgs} " +
                          "${setDB} "  +
                          "--wait --timeout 5m --atomic"
            bat helmCmd
          }
        }
      }
    }
  }
  post {
    success { echo "Pipeline выполнен успешно!" }
    failure { echo "Есть ошибки в сборке." }
    always  { cleanWs() }
  }
}