pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = "myregistry.example.com"
        APP_VERSION = "${env.BUILD_NUMBER}"
        KUBE_NAMESPACE = "my-namespace"
        HELM_CHART_PATH = "infrastructure/helm/my-microservices-chart"
    }

    stages {
        stage('Checkout') {
            steps {
                echo "Checking out source code..."
                checkout scm
            }
        }
        stage('Build & Test') {
        steps {
        script {
            // Определим список каталогов, где находятся проекты с pom.xml
            def modules = [
                "gateway-service",
                "auth-service",
                "user-service",
                "public-event-service",
                "admin-event-service",
                "booking-service",
                "ticketing-service",
                "payment-service",
                "notification-service",
                "analytics-service"
            ]
            def builds = [:]
            for (module in modules) {
                // Для каждого модуля создадим ветку в параллельном запуске
                builds[module] = {
                    dir(module) {
                        echo "Building and testing ${module}..."
                        bat "mvn clean package -DskipTests"
                        bat "mvn test"
                    }
                }
            }
            // Запускаем параллельно сборку всех модулей
            parallel builds
        }
        }
        }
        stage('Build Docker Images') {
            steps {
                script {
                    parallel(
                        "Build gateway-service": {
                            dir('gateway-service') {
                                echo "Building gateway-service..."
                                bat "docker build -t %DOCKER_REGISTRY%/gateway-service:%APP_VERSION% ."
                            }
                        },
                        "Build auth-service": {
                            dir('auth-service') {
                                echo "Building auth-service..."
                                bat "docker build -t %DOCKER_REGISTRY%/auth-service:%APP_VERSION% ."
                            }
                        },
                        "Build user-service": {
                            dir('user-service') {
                                echo "Building user-service..."
                                bat "docker build -t %DOCKER_REGISTRY%/user-service:%APP_VERSION% ."
                            }
                        },
                        "Build public-event-service": {
                            dir('public-event-service') {
                                echo "Building public-event-service..."
                                bat "docker build -t %DOCKER_REGISTRY%/public-event-service:%APP_VERSION% ."
                            }
                        },
                        "Build admin-event-service": {
                            dir('admin-event-service') {
                                echo "Building admin-event-service..."
                                bat "docker build -t %DOCKER_REGISTRY%/admin-event-service:%APP_VERSION% ."
                            }
                        },
                        "Build booking-service": {
                            dir('booking-service') {
                                echo "Building booking-service..."
                                bat "docker build -t %DOCKER_REGISTRY%/booking-service:%APP_VERSION% ."
                            }
                        },
                        "Build ticketing-service": {
                            dir('ticketing-service') {
                                echo "Building ticketing-service..."
                                bat "docker build -t %DOCKER_REGISTRY%/ticketing-service:%APP_VERSION% ."
                            }
                        },
                        "Build payment-service": {
                            dir('payment-service') {
                                echo "Building payment-service..."
                                bat "docker build -t %DOCKER_REGISTRY%/payment-service:%APP_VERSION% ."
                            }
                        },
                        "Build notification-service": {
                            dir('notification-service') {
                                echo "Building notification-service..."
                                bat "docker build -t %DOCKER_REGISTRY%/notification-service:%APP_VERSION% ."
                            }
                        },
                        "Build analytics-service": {
                            dir('analytics-service') {
                                echo "Building analytics-service..."
                                bat "docker build -t %DOCKER_REGISTRY%/analytics-service:%APP_VERSION% ."
                            }
                        }
                    )
                }
            }
        }
        stage('Push Docker Images') {
            steps {
                script {
                    echo "Pushing Docker images to local registry (no credentials required)..."
                    // Если в локальной среде аутентификация не требуется, можно убрать docker login
                    parallel(
                        "Push gateway-service": {
                            dir('gateway-service') {
                                bat "docker push %DOCKER_REGISTRY%/gateway-service:%APP_VERSION%"
                            }
                        },
                        "Push auth-service": {
                            dir('auth-service') {
                                bat "docker push %DOCKER_REGISTRY%/auth-service:%APP_VERSION%"
                            }
                        },
                        "Push user-service": {
                            dir('user-service') {
                                bat "docker push %DOCKER_REGISTRY%/user-service:%APP_VERSION%"
                            }
                        },
                        "Push public-event-service": {
                            dir('public-event-service') {
                                bat "docker push %DOCKER_REGISTRY%/public-event-service:%APP_VERSION%"
                            }
                        },
                        "Push admin-event-service": {
                            dir('admin-event-service') {
                                bat "docker push %DOCKER_REGISTRY%/admin-event-service:%APP_VERSION%"
                            }
                        },
                        "Push booking-service": {
                            dir('booking-service') {
                                bat "docker push %DOCKER_REGISTRY%/booking-service:%APP_VERSION%"
                            }
                        },
                        "Push ticketing-service": {
                            dir('ticketing-service') {
                                bat "docker push %DOCKER_REGISTRY%/ticketing-service:%APP_VERSION%"
                            }
                        },
                        "Push payment-service": {
                            dir('payment-service') {
                                bat "docker push %DOCKER_REGISTRY%/payment-service:%APP_VERSION%"
                            }
                        },
                        "Push notification-service": {
                            dir('notification-service') {
                                bat "docker push %DOCKER_REGISTRY%/notification-service:%APP_VERSION%"
                            }
                        },
                        "Push analytics-service": {
                            dir('analytics-service') {
                                bat "docker push %DOCKER_REGISTRY%/analytics-service:%APP_VERSION%"
                            }
                        }
                    )
                }
            }
        }
        stage('Deploy to Kubernetes') {
            steps {
                echo "Deploying to Kubernetes using Helm..."
                bat """
                    helm upgrade --install my-microservices %HELM_CHART_PATH% --namespace %KUBE_NAMESPACE% --set global.eureka.defaultZone="http://eureka-server:8761/eureka/" --set gateway-service.image.tag=%APP_VERSION% --set auth-service.image.tag=%APP_VERSION% --set user-service.image.tag=%APP_VERSION% --set public-event-service.image.tag=%APP_VERSION% --set admin-event-service.image.tag=%APP_VERSION% --set booking-service.image.tag=%APP_VERSION% --set ticketing-service.image.tag=%APP_VERSION% --set payment-service.image.tag=%APP_VERSION% --set notification-service.image.tag=%APP_VERSION% --set analytics-service.image.tag=%APP_VERSION%
                """
            }
        }
    }
    post {
        success {
            echo "Pipeline executed successfully!"
        }
        failure {
            echo "Pipeline execution failed!"
        }
        always {
            cleanWs()
        }
    }
}
