pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = "myregistry.example.com"
        APP_VERSION = "${env.BUILD_NUMBER}"
        KUBE_NAMESPACE = "my-namespace"
        HELM_CHART_PATH = "infrastructure/helm/my-microservices-chart"
    }

    stages {
        stage('Check Tools') {
            steps {
                sh 'echo $PATH'
                sh 'which docker || echo "docker not found"'
                sh 'which mvn || echo "mvn not found"'
                sh 'which helm || echo "helm not found"'
            }
        }
        stage('Checkout') {
            steps {
                echo "Checking out source code..."
                checkout scm
            }
        }
        stage('Build & Test') {
            steps {
                echo "Building and testing projects..."
                sh 'mvn clean package -DskipTests'
                sh 'mvn test'
            }
        }
        stage('Build Docker Images') {
            steps {
                script {
                    parallel(
                        "Build gateway-service": {
                            dir('gateway-service') {
                                echo "Building gateway-service..."
                                sh "docker build -t ${DOCKER_REGISTRY}/gateway-service:${APP_VERSION} ."
                            }
                        },
                        "Build auth-service": {
                            dir('auth-service') {
                                echo "Building auth-service..."
                                sh "docker build -t ${DOCKER_REGISTRY}/auth-service:${APP_VERSION} ."
                            }
                        },
                        "Build user-service": {
                            dir('user-service') {
                                echo "Building user-service..."
                                sh "docker build -t ${DOCKER_REGISTRY}/user-service:${APP_VERSION} ."
                            }
                        },
                        "Build public-event-service": {
                            dir('public-event-service') {
                                echo "Building public-event-service..."
                                sh "docker build -t ${DOCKER_REGISTRY}/public-event-service:${APP_VERSION} ."
                            }
                        },
                        "Build admin-event-service": {
                            dir('admin-event-service') {
                                echo "Building admin-event-service..."
                                sh "docker build -t ${DOCKER_REGISTRY}/admin-event-service:${APP_VERSION} ."
                            }
                        },
                        "Build booking-service": {
                            dir('booking-service') {
                                echo "Building booking-service..."
                                sh "docker build -t ${DOCKER_REGISTRY}/booking-service:${APP_VERSION} ."
                            }
                        },
                        "Build ticketing-service": {
                            dir('ticketing-service') {
                                echo "Building ticketing-service..."
                                sh "docker build -t ${DOCKER_REGISTRY}/ticketing-service:${APP_VERSION} ."
                            }
                        },
                        "Build payment-service": {
                            dir('payment-service') {
                                echo "Building payment-service..."
                                sh "docker build -t ${DOCKER_REGISTRY}/payment-service:${APP_VERSION} ."
                            }
                        },
                        "Build notification-service": {
                            dir('notification-service') {
                                echo "Building notification-service..."
                                sh "docker build -t ${DOCKER_REGISTRY}/notification-service:${APP_VERSION} ."
                            }
                        },
                        "Build analytics-service": {
                            dir('analytics-service') {
                                echo "Building analytics-service..."
                                sh "docker build -t ${DOCKER_REGISTRY}/analytics-service:${APP_VERSION} ."
                            }
                        }
                    )
                }
            }
        }
        stage('Push Docker Images') {
            steps {
                script {
                    echo "Pushing Docker images to local registry (no credentials required)..."
                    parallel(
                        "Push gateway-service": {
                            dir('gateway-service') {
                                sh "docker push ${DOCKER_REGISTRY}/gateway-service:${APP_VERSION}"
                            }
                        },
                        "Push auth-service": {
                            dir('auth-service') {
                                sh "docker push ${DOCKER_REGISTRY}/auth-service:${APP_VERSION}"
                            }
                        },
                        "Push user-service": {
                            dir('user-service') {
                                sh "docker push ${DOCKER_REGISTRY}/user-service:${APP_VERSION}"
                            }
                        },
                        "Push public-event-service": {
                            dir('public-event-service') {
                                sh "docker push ${DOCKER_REGISTRY}/public-event-service:${APP_VERSION}"
                            }
                        },
                        "Push admin-event-service": {
                            dir('admin-event-service') {
                                sh "docker push ${DOCKER_REGISTRY}/admin-event-service:${APP_VERSION}"
                            }
                        },
                        "Push booking-service": {
                            dir('booking-service') {
                                sh "docker push ${DOCKER_REGISTRY}/booking-service:${APP_VERSION}"
                            }
                        },
                        "Push ticketing-service": {
                            dir('ticketing-service') {
                                sh "docker push ${DOCKER_REGISTRY}/ticketing-service:${APP_VERSION}"
                            }
                        },
                        "Push payment-service": {
                            dir('payment-service') {
                                sh "docker push ${DOCKER_REGISTRY}/payment-service:${APP_VERSION}"
                            }
                        },
                        "Push notification-service": {
                            dir('notification-service') {
                                sh "docker push ${DOCKER_REGISTRY}/notification-service:${APP_VERSION}"
                            }
                        },
                        "Push analytics-service": {
                            dir('analytics-service') {
                                sh "docker push ${DOCKER_REGISTRY}/analytics-service:${APP_VERSION}"
                            }
                        }
                    )
                }
            }
        }
        stage('Deploy to Kubernetes') {
            steps {
                echo "Deploying to Kubernetes using Helm..."
                sh """
                    helm upgrade --install my-microservices ${HELM_CHART_PATH} \
                      --namespace ${KUBE_NAMESPACE} \
                      --set global.eureka.defaultZone="http://eureka-server:8761/eureka/" \
                      --set gateway-service.image.tag=${APP_VERSION} \
                      --set auth-service.image.tag=${APP_VERSION} \
                      --set user-service.image.tag=${APP_VERSION} \
                      --set public-event-service.image.tag=${APP_VERSION} \
                      --set admin-event-service.image.tag=${APP_VERSION} \
                      --set booking-service.image.tag=${APP_VERSION} \
                      --set ticketing-service.image.tag=${APP_VERSION} \
                      --set payment-service.image.tag=${APP_VERSION} \
                      --set notification-service.image.tag=${APP_VERSION} \
                      --set analytics-service.image.tag=${APP_VERSION}
                """
            }
        }
    }
    post {
        success {
            echo "Pipeline executed successfully!"
        }
        failure {
            echo "Pipeline execution failed!"
        }
        always {
            cleanWs()
        }
    }
}
